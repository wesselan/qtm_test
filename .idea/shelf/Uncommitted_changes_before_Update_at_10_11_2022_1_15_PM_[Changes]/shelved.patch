Index: stream_6dof_example.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n    Streaming 6Dof from QTM\r\n\"\"\"\r\n\r\nimport asyncio\r\nimport xml.etree.ElementTree as ET\r\nimport pkg_resources\r\nimport numpy as np\r\n\r\nimport qtm\r\n\r\nQTM_FILE = pkg_resources.resource_filename(\"qtm\", \"data/Demo.qtm\")\r\n\r\n\r\ndef create_body_index(xml_string):\r\n    \"\"\" Extract a name to index dictionary from 6dof settings xml \"\"\"\r\n    xml = ET.fromstring(xml_string)\r\n\r\n    body_to_index = {}\r\n    for index, body in enumerate(xml.findall(\"*/Body/Name\")):\r\n        body_to_index[body.text.strip()] = index\r\n\r\n    return body_to_index\r\n\r\n\r\nasync def main():\r\n\r\n    # Connect to qtm\r\n    connection = await qtm.connect(\"127.0.0.1\")\r\n\r\n    # Connection failed?\r\n    if connection is None:\r\n        print(\"Failed to connect\")\r\n        return\r\n\r\n    # Take control of qtm, context manager will automatically release control after scope end\r\n    async with qtm.TakeControl(connection, \"password\"):\r\n\r\n        realtime = False\r\n\r\n        if realtime:\r\n            # Start new realtime\r\n            await connection.new()\r\n        else:\r\n            # Load qtm file\r\n            await connection.load(QTM_FILE)\r\n\r\n            # start rtfromfile\r\n            await connection.start(rtfromfile=True)\r\n\r\n    # Get 6dof settings from qtm\r\n    xml_string = await connection.get_parameters(parameters=[\"6d\"])\r\n    body_index = create_body_index(xml_string)\r\n\r\n    wanted_body = \"L-frame\"\r\n\r\n    def on_packet(packet):\r\n        info, bodies = packet.get_6d()\r\n        print(\r\n            \"Framenumber: {} - Body count: {}\".format(\r\n                packet.framenumber, info.body_count\r\n            )\r\n        )\r\n\r\n        if wanted_body is not None and wanted_body in body_index:\r\n            # Extract one specific body\r\n            wanted_index = body_index[wanted_body]\r\n            position, rotation = bodies[wanted_index]\r\n            print(\"{} - Pos: {} - Rot: {}\".format(wanted_body, position, rotation))\r\n            print(bodies[wanted_index][1].matrix[0])\r\n            print(np.array(rotation.matrix))\r\n        else:\r\n            # Print all bodies\r\n            for position, rotation in bodies:\r\n                print(\"Pos: {} - Rot: {}\".format(position, rotation))\r\n\r\n\r\n    # Start streaming frames\r\n    await connection.stream_frames(frames=\"frequency:2\", components=[\"6d\"], on_packet=on_packet)\r\n\r\n    # Wait asynchronously 5 seconds\r\n    await asyncio.sleep(5)\r\n\r\n    # Stop streaming\r\n    await connection.stream_frames_stop()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Run our asynchronous function until complete\r\n    asyncio.get_event_loop().run_until_complete(main())
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/stream_6dof_example.py b/stream_6dof_example.py
--- a/stream_6dof_example.py	(revision d48681c31a9aab64a039dfe4a0dc0ce932b9bdbc)
+++ b/stream_6dof_example.py	(date 1662991931158)
@@ -5,7 +5,7 @@
 import asyncio
 import xml.etree.ElementTree as ET
 import pkg_resources
-import numpy as np
+#import numpy as np
 
 import qtm
 
